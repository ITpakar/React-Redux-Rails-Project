c
grouped = deals.group_by {|deal| DateTime.parse(deal["projected_close_date"].to_s).strftime("%B %Y")}
exit
deals[0]["projected_close_date"]
deals["projected_close_date"]
deals.attributes
deals.first
grouped = deals.group_by {|deal| DateTime.parse(deal[:projected_close_date].to_s).strftime("%B %Y")}
c
exit
deal = Deal.create( organization_id: 1, title: 'Project Panda', client_name: 'Panda Express', projected_close_date: '2016-07-24', transaction_type: 'Merger', deal_size: '$1,500,000,000', completion_percent: 9, admin_user_id: 1, activated: true, projected_close_date: 1.year.from_now)
Deal.create(id: 1, organization_id: 1, title: 'Project Panda', client_name: 'Panda Express', projected_close_date: '2016-07-24', transaction_type: 'Merger', deal_size: '$1,500,000,000', completion_percent: 9, admin_user_id: 1, activated: true, projected_close_date: 1.year.from_now)
Deal.create( #id: 1, organization_id: 1, title: 'Project Panda', client_name: 'Panda Express', projected_close_date: '2016-07-24', transaction_type: 'Merger', deal_size: '$1,500,000,000', completion_percent: 9, admin_user_id: 1, activated: true, projected_close_date: 1.year.from_now)
1.year.from_now
deals.first[:projected_close_date]
deals.first[:[:projected_close_date]
deals.first.attributes
deals.first
deals
deals.first.attributes[:projected_close_date]
c
deal
c
User.all.map(&:avatar_name)
current_user.deals.includes(:users).map{|deal| deal.attributes.merge({collaborators: deal.users})}.first[:collaborators].first.avatar_name
current_user.deals.includes(:users).map{|deal| deal.attributes.merge({collaborators: deal.users})}.first[:collaborators].first.avatar
current_user.deals.includes(:users).map{|deal| deal.attributes.merge({collaborators: deal.users})}.first[:collaborators].first
current_user.deals.includes(:users).map{|deal| deal.attributes.merge({collaborators: deal.users})}.first[:collaborators]
current_user.deals.includes(:users).map{|deal| deal.attributes.merge({collaborators: deal.users})}.first.collaborators
current_user.deals.includes(:users).map{|deal| deal.attributes.merge({collaborators: deal.users})}.first.keys
current_user.deals.includes(:users).map{|deal| deal.attributes.merge({collaborators: deal.users})}.first
current_user.deals.includes(:users).map{|deal| deal.attributes.merge({collaborators: deal.users})}.first.collaborators
current_user.deals.includes(:users).map{|deal| deal.attributes.merge({collaborators: deal.users})}.first.collaborators.first
current_user.deals.includes(:users).map{|deal| deal.attributes.merge({collaborators: deal.users})}.first.users.first
current_user.deals.includes(:users).map{|deal| deal.attributes.merge({collaborators: deal.users})}.first
current_user.deals.includes(:users).map{|deal| deal.attributes.merge({collaborators: deal.users})}
current_user.deals.includes(:users).map{|deal| deal.attributes.merge({collaborators: deal.users})
current_user.deals.includes(:users).first.attributes.merge({})
current_user.deals.includes(:users).first.attributes
current_user.deals.includes(:users).first.users.count
current_user.deals.includes(:users).first.users
current_user.deals.includes(:users).first
current_user.deals.includes(:users)
current_user.deals.includes(:user)
current_user.deals.includes(:user).first
current_user.deals.includes(:user)
deals.merge
deals = deals.map{|deal| deal.collaborators = deal.users}
deals = deals.map{|deal| deal.collaborators = deal.users; deal}
deals = current_user.deals.includes(:deal_collaborators)
current_user.deals.includes(:deal_collaborators).first.class
current_user.deals.includes(:deal_collaborators).first
current_user.deals.includes(:deal_collaborators)
current_user.deals.includes(:deal_collaborator).first
current_user.deals.includes(:deal_collaborators).first
Deal.all.includes(:deal_collaborators)
Deal.includes(:deal_collaborators).all
Deal.includes(:deal_collaborators)
current_user.deals.includes(:deal_collaborators).first.deal_collaborators
current_user.deals.includes(:deal_collaborators).first
current_user.deals.includes(:deal_collaborators)
current_user.deals.includes
current_user.deals.joins(:deal_collaborators).first
current_user.deals.joins(:deal_collaborators)
current_user.deals.joins
current_user.deals
grouped.keys
grouped
grouped[1]
grouped[0]
grouped.count
grouped = @deals.group_by {|deal| DateTime.parse(deal.projected_close_date.to_s).strftime("%B %Y")}
@deals.group_by {|deal| DateTime.parse(deal.projected_close_date.to_s).strftime("%B %Y")}
@deals.group_by {|deal| DateTime.parse(deal.projected_close_date).strftime("%B %Y")}
DateTime.parse(string).strftime("%B %Y")
DateTime.parse(string).strftime("%B")
DateTime.parse(string).strftime("%B)
DateTime.parse(string).strftime
DateTime.parse(string)
string = "2015-12-01"
@deals.group_by {|deal| deal.projected_close_date}
@deals.group_by(:projected_close_date)
@deals
@deals.group_by@deals
@deals.group_by
@deals.group_b
@deals
@deals.to_h
@deals.to_hash
@deals
c
current_user
exit
deals.map(&:completion_percent)
deals.map(&:completion_percentage)
deals.map(&:competion_percentage)
deal.map(&:competion_percentage)
deals.map(&:activated)
deals.map(&:status)
deals
c
params
