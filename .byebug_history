c
url.gsub(Rails.root.to_s, '')
Rails.root
url
c
params
exit
zf.write()
sf.write()
zf = ZipFileGenerator.new(file_base, output_file)
output_file = Rails.public_path.to_s + '/closing_books' + "/#{self.id}.zip"
file_base
c
reload!
index = ApplicationController.new.render_to_string partial: 'app/closing_books/html_index', locals: {category: self.deal.closing_category}, layout: false
exit
ApplicationController.new.render_to_string(partial: 'app/closing_books/html_index', locals: {category: self.deal.closing_category}, layout: false)
ApplicationController.new.render_to_string partial: 'app/closing_books/html_index', locals: {category: self.deal.closing_category}, layout: false
self.deal.closing_category
c
token = Boxr::get_enterprise_token(private_key: private_key)
private_key = ENV['JWT_PRIVATE_KEY']
private_key = OpenSSL::PKey::RSA.new(YAML.load(%Q(---\n"#{ENV['JWT_PRIVATE_KEY']}"\n)), ENV['JWT_PRIVATE_KEY_PASSWORD'])
c
params
c
params["document"]["signers"].values
params["document"]["signers"]
params["document"]
params
c
signers.last['Signed'] && true
signers.first['Signed'] && true
signers.first['Signed']
signers.first
signers = status['DocuSignEnvelopeInformation']['EnvelopeStatus']['RecipientStatuses']['RecipientStatus']
puts  status['DocuSignEnvelopeInformation']['EnvelopeStatus']['RecipientStatuses']['RecipientStatus'].count
puts  status['DocuSignEnvelopeInformation']['EnvelopeStatus']['RecipientStatuses']['RecipientStatus']
puts  status['DocuSignEnvelopeInformation']['EnvelopeStatus']['RecipientStatuses'].to_yaml
signers =  status['DocuSignEnvelopeInformation']['EnvelopeStatus']['RecipientStatuses']
signers =  status['DocuSignEnvelopeInformation']['EnvelopeStatus']['RecipientStatuses'].values.count
signers =  status['DocuSignEnvelopeInformation']['EnvelopeStatus']['RecipientStatuses'].values
signers =  status['DocuSignEnvelopeInformation']['EnvelopeStatus']['RecipientStatuses']
puts status['DocuSignEnvelopeInformation']['EnvelopeStatus'].to_yaml
DocumentSigner.where(envelope_id: envelope_id
envelope_id = status['DocuSignEnvelopeInformation']['EnvelopeStatus']['EnvelopeID']
status['DocuSignEnvelopeInformation']['EnvelopeStatus']['EnvelopeID']
status['DocuSignEnvelopeInformation']['EnvelopeStatus']['EnvelopeId']
status['DocuSignEnvelopeInformation']['EnvelopeStatus']
status['DocuSignEnvelopeInformation']
status
c
status
c
puts hash.to_yaml
hash
hahs
hash = Hash.from_xml(body)
hash
hash = Hash.from_xml(request.body.read)
body = "<?xml version=\"1.0\" encoding=\"utf-8\"?><DocuSignEnvelopeInformation xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://www.docusign.net/API/3.0\"><EnvelopeStatus><RecipientStatuses><RecipientStatus><Type>Signer</Type><Email>timtamboy63@gmail.com</Email><UserName>Chintan Parikh</UserName><RoutingOrder>1</RoutingOrder><Sent>2016-06-16T12:10:57.483</Sent><Delivered>2016-06-16T12:11:28.233</Delivered><Signed>2016-06-16T12:11:36.877</Signed><DeclineReason xsi:nil=\"true\" /><Status>Completed</Status><RecipientIPAddress>96.84.190.243</RecipientIPAddress><CustomFields /><TabStatuses><TabStatus><TabType>SignHere</TabType><Status>Signed</Status><XPosition>314</XPosition><YPosition>183</YPosition><DocumentID>1</DocumentID><PageNumber>1</PageNumber></TabStatus></TabStatuses><AccountStatus>Active</AccountStatus><RecipientId>9d482f53-c868-4283-878f-b04ede66a692</RecipientId></RecipientStatus></RecipientStatuses><TimeGenerated>2016-06-16T12:11:59.1181094</TimeGenerated><EnvelopeID>b609b808-235e-4033-9985-e7c1e3afcc9c</EnvelopeID><Subject>You've been asked to sign Test Document</Subject><UserName>Chintan Parikh</UserName><Email>chintan@pennywhale.com</Email><Status>Completed</Status><Created>2016-06-16T12:10:56.093</Created><Sent>2016-06-16T12:10:57.513</Sent><Delivered>2016-06-16T12:11:28.437</Delivered><Signed>2016-06-16T12:11:36.923</Signed><Completed>2016-06-16T12:11:36.923</Completed><ACStatus>Original</ACStatus><ACStatusDate>2016-06-16T12:10:56.093</ACStatusDate><ACHolder>Chintan Parikh</ACHolder><ACHolderEmail>chintan@pennywhale.com</ACHolderEmail><ACHolderLocation>DocuSign</ACHolderLocation><SigningLocation>Online</SigningLocation><SenderIPAddress>96.84.190.243  </SenderIPAddress><EnvelopePDFHash /><CustomFields /><AutoNavigation>true</AutoNavigation><EnvelopeIdStamping>true</EnvelopeIdStamping><AuthoritativeCopy>false</AuthoritativeCopy><DocumentStatuses><DocumentStatus><ID>1</ID><Name>Test Document</Name><TemplateName /><Sequence>1</Sequence></DocumentStatus></DocumentStatuses></EnvelopeStatus></DocuSignEnvelopeInformation>"
body = request.body.read
hash
hash = Hash.from_xml(request.body.read)
Hash.from_xml(request.body.read)
request.body.read
request.body
c
Hash.from_xml(request.body)
request.body.read
request.body.to_s
request.body
c
params
c
params
c
params
c
params
c
callback_url
exit
Rails.application.routes.url_helpers.app_docusign_webhook_url(deal_document_id: self.id, host: ENV['NGROK_URL'])
Rails.env.development?
Rails.root
Rails.application.routes.url_helpers.app_docusign_webhook_url(deal_document_id: self.id, only_path: true)
Rails.application.routes.url_helpers.app_docusign_webhook_url(deal_document_id: self.id)
Rails.application.routes.url_helpersapp_docusign_webhook_url(deal_document_id: self.id)
app_docusign_webhook_url(deal_document_id: self.id)
c
file[:path].path.to_s
file[:path].path
file[:path]
c
exit
class Pathname
file[:io] || file[:path]
c
local_path.methods
local_path
local_path.attributes
local_path.path.methods
local_path.path.attributes
local_path.path
local_path = filename_or_io
io = File.open(filename_or_io)
filename_or_io
filename_or_io.respond_to?(:path)
local_path = filename_or_io.respond_to?(:path) ? filename_or_io.path : "local.path"
io.respond_to? :read
local_path = ""
io
c
file[:path]
file[:io]
file[:name]
file[:content_type] || 'application/pdf'
;2Cfile[:content_type] || 'application/pdf'
file[:io] || file[:path]
file
c
FilePart.new(boundary, name, value, headers)
headers
value
name
boundary
value
c
ios
c
ios.first.local_path()
ios.first.local_path
ios.local_path()
ios
c
file_params
c
ios
c
ios
c
file_params = create_file_params(ios)
create_file_params(ios)
ios
c
exit
reload!
ios
c
create_file_params(ios)
ios
c
exit
file_params
post_body
uri.request_uri
c
reload!
file_path
signers
c
mail(to: @email, subject: "You've been invited to join #{organization.name.capitalize} on Doxly")
organization
email
name
@name
c
params
c
deal.status
deal
exit
User.last.destroy
app_user_confirmation_url(@resource)
app_user_confirmation_url
api_user_url(@resource)
api_user_url
app_user_confirmation_url(@resource)
app_user_confirmation_path(@resource)
new_app_user_confirmation_url(@resource)
app_user_confirmation_url(@resource)
@resource
app_user_confirmation_url(@resource, confirmation_token: @token)
c
current_user.context.deals.count
c
reload!
OrganizationUser.first.deals
Deal.where(organization_user_id: 1).count
Deal.where(organization_user_id: 1)
current_user.organization_user.id
current_user.organization_user.deals
current_user.context.class
current_user.context
current_user.organization.deals.count
current_user.organization.deals
current_user.organization
current_user.context.deals.uniq.count
current_user.context.deals.uniq
current_user.context.deals.count
c
user.errors
User.last
user = User.create(user_params)
user.save
user = User.new(user_params)
user_params
User.where(email: 'chintan@seedfeed.com')
user.save
user.activated = true
user.email_domain
user = User.new(user_params)
exit
c
Comment.find(2)
Comment.last
self
c
self
c
Comment.first
self
klass
c
assoc_value = self.send(mapped) if mapped.present?
mapped = self.association_map[klass.to_s]
self
klass
c
self
klass
klas
exit
self.try(:send, self.association_map.try(:[], klass.to_s))
self.association_map.try(:[], klass.to_s)
 assoc_value = self.try(:send, self.association_map.try(:[], klass.to_s))
 assoc_value = self.try(:send, self.association_map.try(:[], klass.to_s)
exit
self.association_map
self.association_map[klass.to_s]
klass
self.class
c
klass
c
deal
c
send("_#{kind}")
"_#{kind}"
options = args.last
c
manager._run_callbacks
manager.config
manager.callbacks
manager.methods
